{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marina.kravchuk\\\\Documents\\\\GitHub\\\\react-form\\\\src\\\\components\\\\SomeInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SomeInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [wasNameInputToched, setWasNameInputToched] = useState(false);\n  const isEnteredNameValid = enteredName.trim() !== '';\n  const isNameInputInvalid = !isEnteredNameValid && wasNameInputToched;\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const nameinputLostFocusHandler = event => {\n    setWasNameInputToched(true);\n  };\n\n  const formSubmitHandler = event => {\n    event.preventDefault();\n    setWasNameInputToched(true);\n\n    if (!isEnteredNameValid) {\n      return;\n    }\n\n    console.log(enteredName);\n    setEnteredName('');\n    setWasNameInputToched(false);\n  };\n\n  const nameInputClasses = isNameInputInvalid ? \"form-control  invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0418\\u043C\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        value: enteredName,\n        onBlur: nameinputLostFocusHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), isNameInputInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0438\\u043C\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SomeInput, \"MXVWS31TYAh4iVF8sAWGsiC1wRo=\");\n\n_c = SomeInput;\nexport default SomeInput;\n/* import { useState, useRef } from \"react\"; \n\nconst SomeInput = (props) => {\n\n  const nameInputRef=useRef()\n \nconst [enteredName, setEnteredName] = useState(\"\") \nconst [isEnteredNameValid, setIsEnteredNameValid] = useState(false)\nconst [wasNameInputToched, setWasNameInputToched]  = useState(false) \n\nconst nameInputChangeHandler = (event) => {\n  setEnteredName(event.target.value)\n} \nconst nameinputLostFocusHandler = (event) => {\n  setWasNameInputToched(true)\n  if (enteredName.trim() === \"\"){\n    setIsEnteredNameValid(false);\n  return;\n  }\n}\n\nconst formSubmitHandler = (event) => {\n  event.preventDefault();\n  setWasNameInputToched(true)\n\nif (enteredName.trim() === \"\"){\n  setIsEnteredNameValid(false);\nreturn;\n}\nsetIsEnteredNameValid(true);\n\n\n  console.log(enteredName)\n  console.log(nameInputRef.current.value)\n  setEnteredName('') */\n\n/*   nameInputRef.current.value= \"\";  not best practice*/\n\n/* }\n\nconst isNameInputInvalid = !isEnteredNameValid && wasNameInputToched\nconst nameInputClasses = isNameInputInvalid ? \"form-control  invalid\" : \"form-control\"\n\n  return (\n    <form onSubmit= {formSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Введите Имя</label>\n        <input ref={nameInputRef} type=\"text\" id=\"name\" onChange = {nameInputChangeHandler} \n        value={enteredName} onBlur={nameinputLostFocusHandler}  />\n        {isNameInputInvalid && <p className=\"error-text\">Введите имя</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button >Отправить</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SomeInput;\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"SomeInput\");","map":{"version":3,"names":["useState","SomeInput","props","enteredName","setEnteredName","wasNameInputToched","setWasNameInputToched","isEnteredNameValid","trim","isNameInputInvalid","nameInputChangeHandler","event","target","value","nameinputLostFocusHandler","formSubmitHandler","preventDefault","console","log","nameInputClasses"],"sources":["C:/Users/marina.kravchuk/Documents/GitHub/react-form/src/components/SomeInput.js"],"sourcesContent":["\nimport { useState} from \"react\"; \n\nconst SomeInput = (props) => {\nconst [enteredName, setEnteredName] = useState(\"\") \nconst [wasNameInputToched, setWasNameInputToched]  = useState(false) \n\n\nconst isEnteredNameValid = enteredName.trim() !== ''\nconst isNameInputInvalid = !isEnteredNameValid && wasNameInputToched\n\nconst nameInputChangeHandler = (event) => {\n  setEnteredName(event.target.value)\n  } \nconst nameinputLostFocusHandler = (event) => {\n  setWasNameInputToched(true)\n}\n\nconst formSubmitHandler = (event) => {\n  event.preventDefault();\n  setWasNameInputToched(true)\n\nif (! isEnteredNameValid ){\nreturn;\n}\n  console.log(enteredName)\n  setEnteredName('')\n  setWasNameInputToched(false)\n\n}\n\n\nconst nameInputClasses = isNameInputInvalid ? \"form-control  invalid\" : \"form-control\"\n\n  return (\n    <form onSubmit= {formSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Введите Имя</label>\n        <input type=\"text\" id=\"name\" onChange = {nameInputChangeHandler} \n        value={enteredName} onBlur={nameinputLostFocusHandler}  />\n        {isNameInputInvalid && <p className=\"error-text\">Введите имя</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button >Отправить</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SomeInput;\n\n\n\n\n/* import { useState, useRef } from \"react\"; \n\nconst SomeInput = (props) => {\n\n  const nameInputRef=useRef()\n \nconst [enteredName, setEnteredName] = useState(\"\") \nconst [isEnteredNameValid, setIsEnteredNameValid] = useState(false)\nconst [wasNameInputToched, setWasNameInputToched]  = useState(false) \n\nconst nameInputChangeHandler = (event) => {\n  setEnteredName(event.target.value)\n} \nconst nameinputLostFocusHandler = (event) => {\n  setWasNameInputToched(true)\n  if (enteredName.trim() === \"\"){\n    setIsEnteredNameValid(false);\n  return;\n  }\n}\n\nconst formSubmitHandler = (event) => {\n  event.preventDefault();\n  setWasNameInputToched(true)\n\nif (enteredName.trim() === \"\"){\n  setIsEnteredNameValid(false);\nreturn;\n}\nsetIsEnteredNameValid(true);\n\n\n  console.log(enteredName)\n  console.log(nameInputRef.current.value)\n  setEnteredName('') */\n/*   nameInputRef.current.value= \"\";  not best practice*/\n/* }\n\nconst isNameInputInvalid = !isEnteredNameValid && wasNameInputToched\nconst nameInputClasses = isNameInputInvalid ? \"form-control  invalid\" : \"form-control\"\n\n  return (\n    <form onSubmit= {formSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Введите Имя</label>\n        <input ref={nameInputRef} type=\"text\" id=\"name\" onChange = {nameInputChangeHandler} \n        value={enteredName} onBlur={nameinputLostFocusHandler}  />\n        {isNameInputInvalid && <p className=\"error-text\">Введите имя</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button >Отправить</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SomeInput;\n */"],"mappings":";;;AACA,SAASA,QAAT,QAAwB,OAAxB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA+CN,QAAQ,CAAC,KAAD,CAA7D;EAGA,MAAMO,kBAAkB,GAAGJ,WAAW,CAACK,IAAZ,OAAuB,EAAlD;EACA,MAAMC,kBAAkB,GAAG,CAACF,kBAAD,IAAuBF,kBAAlD;;EAEA,MAAMK,sBAAsB,GAAIC,KAAD,IAAW;IACxCP,cAAc,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;EACC,CAFH;;EAGA,MAAMC,yBAAyB,GAAIH,KAAD,IAAW;IAC3CL,qBAAqB,CAAC,IAAD,CAArB;EACD,CAFD;;EAIA,MAAMS,iBAAiB,GAAIJ,KAAD,IAAW;IACnCA,KAAK,CAACK,cAAN;IACAV,qBAAqB,CAAC,IAAD,CAArB;;IAEF,IAAI,CAAEC,kBAAN,EAA0B;MAC1B;IACC;;IACCU,OAAO,CAACC,GAAR,CAAYf,WAAZ;IACAC,cAAc,CAAC,EAAD,CAAd;IACAE,qBAAqB,CAAC,KAAD,CAArB;EAED,CAXD;;EAcA,MAAMa,gBAAgB,GAAGV,kBAAkB,GAAG,uBAAH,GAA6B,cAAxE;EAEE,oBACE;IAAM,QAAQ,EAAGM,iBAAjB;IAAA,wBACE;MAAK,SAAS,EAAEI,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,IAAI,EAAC,MAAZ;QAAmB,EAAE,EAAC,MAAtB;QAA6B,QAAQ,EAAIT,sBAAzC;QACA,KAAK,EAAEP,WADP;QACoB,MAAM,EAAEW;MAD5B;QAAA;QAAA;QAAA;MAAA,QAFF,EAIGL,kBAAkB,iBAAI;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAJzB;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAOE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAPF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAaD,CA5CD;;GAAMR,S;;KAAAA,S;AA8CN,eAAeA,SAAf;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}